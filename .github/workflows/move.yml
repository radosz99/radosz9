name: "Scrabble"

on:
  issues:
    types: [opened]

jobs:
  move:
    runs-on: ubuntu-latest
    steps:
    - name: Check event name
      run: echo "${{ github.event_name }}"
    
    - name: Set env vars
      run: |
        echo "${{ github.event_name }}"
        echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "ISSUE_AUTHOR=${{ github.event.issue.user.login }}" >> $GITHUB_ENV
        echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
        echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
        
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
      
    - name: Setup
      run: |
        gem install octokit -v 5.1.0 -N --silent
        gem install rbnacl --silent
        
    - name: Play
      run: |
        ruby <<- EORUBY
        
        require 'octokit'
        require 'uri'
        require 'net/http'
        require 'json'
        require "rbnacl"
        require "base64"

        
        @preview_headers = [
            ::Octokit::Preview::PREVIEW_TYPES[:reactions],
            ::Octokit::Preview::PREVIEW_TYPES[:integrations]
          ]
          
        begin
          github_token = "${{ secrets.TOKEN_GITHUB }}"
          repository = "#{ENV.fetch('REPOSITORY')}"
          game_token = "${{ secrets.GAME_TOKEN }}"
          server = "${{ secrets.SERVER }}"
          issue_title = ENV.fetch('ISSUE_TITLE')
          issue_number = ENV.fetch('ISSUE_NUMBER')
          issue_author = ENV.fetch('ISSUE_AUTHOR')
        end
        def make_get_request(uri)
          response = Net::HTTP.get_response(uri)
          return response.body
        end
        def replace_letters(server, game_token, letters, issue_author, issue_number, issue_title)
          uri = URI("#{server}/replace/#{game_token}")
          request_params =  {
            letters: letters,
            issue_number: issue_number,
            github_user: issue_author,
            issue_title: issue_title
          }
          request_header = { 'Content-Type': 'application/json' }
          http = Net::HTTP.new(uri.host, uri.port)
          request = Net::HTTP::Post.new(uri.path, request_header)
          request.body = request_params.to_json
          response = http.request(request)
          return response
        end
        def init_game(server)
          uri = URI("#{server}/initialize")
          return make_get_request(uri)
        end
        def get_board_image(server, game_token)
          uri = URI("#{server}/board-image/#{game_token}")
          return make_get_request(uri)
        end
        def get_rack_image(server, game_token)
          uri = URI("#{server}/rack-image/#{game_token}")
          return make_get_request(uri)
        end
        def get_readme_content(server, game_token, repository)
          uri = URI("#{server}/readme/#{game_token}?repository_path=#{repository}")
          return make_get_request(uri)
        end
        def make_move(server, game_token, move, issue_author, issue_number, issue_title)
          uri = URI("#{server}/move/#{game_token}")
          request_params =  {
            move: move,
            issue_number: issue_number,
            github_user: issue_author,
            issue_title: issue_title
          }
          request_header = { 'Content-Type': 'application/json' }
          http = Net::HTTP.new(uri.host, uri.port)
          request = Net::HTTP::Post.new(uri.path, request_header)
          request.body = request_params.to_json
          response = http.request(request)
          return response
        end
        def put_file_on_repo(client, repo, filepath, commit, content)
          puts "Getting file #{filepath} from #{repo}"
          current_content = client.contents(
            repo,
            path: filepath
          )
          client.create_contents(
            repo,
            filepath,
            commit,
            content,
            sha: current_content.sha,
            branch: 'main'
          )
          puts "File #{filepath} has been found and updated"
          rescue Octokit::NotFound => e
            client.create_contents(
              repo,
              filepath,
              commit,
              content,
              branch: 'main'
            )
            puts "File #{filepath} had not been found so it was created"
        end
        begin
          title_split = issue_title.split('|')
          SCRABBLE_ACTION_TYPE   = title_split[1].to_s
          DETAILS  = title_split[2].to_s
          client = Octokit::Client.new(:access_token => github_token)
          raise StandardError.new 'replace|move are the only allowed commands' unless ['replace','move'].include? SCRABBLE_ACTION_TYPE
          if SCRABBLE_ACTION_TYPE == 'move'
            puts "Move action type"
            response = make_move(server, game_token, DETAILS, issue_author, issue_number, issue_title)
          elsif SCRABBLE_ACTION_TYPE == 'replace'
            puts "Replace action type"
            response = replace_letters(server, game_token, DETAILS, issue_author, issue_number, issue_title)
          elsif SCRABBLE_ACTION_TYPE == 'init'
            puts "New game"
            response = init_game(server)
            parsed_json = JSON.parse(response.body)
            new_game_token = parsed_json['game_token']
            
            github_key = client.get_public_key(repository)

            key = Base64.decode64(github_key.key)

            box = RbNaCl::Boxes::Sealed.from_public_key(RbNaCl::PublicKey.new(key))
            encrypted_secret = box.encrypt(new_game_token)
            options = { "encrypted_value" => Base64.strict_encode64(encrypted_secret), "key_id" => github_key.key_id}
            client.create_or_update_secret(repository, "GAME_TOKEN", options)
            game_token = new_game_token
          end
          puts DETAILS
          puts response.body
          if response.kind_of? Net::HTTPSuccess
            client.create_issue_reaction(repository, issue_number, 'hooray', {accept: @preview_headers})
            put_file_on_repo(client, repository, "README.md", "New readme", get_readme_content(server, game_token, repository))
            put_file_on_repo(client, repository, "board.png", "New board", get_board_image(server, game_token))
            put_file_on_repo(client, repository, "rack.png", "New rack", get_rack_image(server, game_token))
          else
            client.create_issue_reaction(repository, issue_number, 'confused', {accept: @preview_headers})
          end
          parsed_json = JSON.parse(response.body)
          detail = parsed_json['detail']
          client.add_comment(repository, issue_number, detail)
          client.close_issue(repository, issue_number)
        rescue StandardError => e
          puts "Unable to parse - @#{e}"
          client.create_issue_reaction(repository, issue_number, 'confused', {accept: @preview_headers})
          client.add_comment(repository, issue_number, "Unable to parse - @#{e}")
          client.close_issue(repository, issue_number)
          exit(0)
        end
        EORUBY
